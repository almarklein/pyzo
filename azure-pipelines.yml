trigger:
  branches:
    include:
    - master
  tags:
    include:
    - v*

variables:
  NAME: pyzo
  PY_ARCH: x64
  PY_VERSION: 3.7


jobs:

- job: Build

  strategy:
    matrix:
      Linux-tester:
        vmImage: ubuntu-16.04
        LINT: 1
        TEST: 1
      Linux-64:
        vmImage: ubuntu-16.04
        #DOCKERIMAGE: manylinux2014_x86_64
        #FREEZE: 0 because freezing must only happen on container
        TEST: 1
        FREEZE: 1
      MacOS-64:
        vmImage: macOS-10.14
        MACOSX_DEPLOYMENT_TARGET: '10.13'
        TEST: 1
        FREEZE: 1
      Windows-64:
        vmImage: vs2017-win2016
        TEST: 1
        FREEZE: 1
      Windows-32:
        vmImage: vs2017-win2016
        PY_ARCH: x86
        TEST: 1
        FREEZE: 1

  pool:
    vmImage: $(vmImage)

  steps:
  - task: Bash@3
    displayName: Docker build
    condition: and(succeeded(), ne(variables['DOCKERIMAGE'], ''))
    inputs:
      targetType: inline
      script: |
        set -ex
        CID=$(docker create -t -w /tmp/pyzo -v $PWD:/tmp/src:ro quay.io/pypa/$(DOCKERIMAGE) bash -c "\
          cp -r /tmp/src/. . && \
          rm -rf ./frozen && \
          /opt/python/cp37-cp37m/bin/python -m pip install -U pip &&\
          /opt/python/cp37-cp37m/bin/python -m pip install -U pyqt5 pyinstaller &&\
          /opt/python/cp37-cp37m/bin/python -m pip install . &&\
          /opt/python/cp37-cp37m/bin/python freeze/freezeScript.py &&\
          rm -rf ./frozen/pyzo")
        docker start -ai $CID
        mkdir -p frozen
        docker cp $CID:/tmp/pyzo/frozen/. ./frozen/.
        docker rm $CID
  - task: UsePythonVersion@0
    displayName: Select Python
    condition: and(succeeded(), eq(variables['DOCKERIMAGE'], ''))
    inputs:
      versionSpec: $(PY_VERSION)
      architecture: $(PY_ARCH)
  - task: Bash@3
    displayName: Install development requirements
    condition: and(succeeded(), eq(variables['DOCKERIMAGE'], ''))
    inputs:
      targetType: inline
      script: |
        set -ex
        python -m pip install -U pip
        pip install -U pyside2
        pip install -U pytest black flake8 pyinstaller
  - task: Bash@3
    displayName: Install inno setup (on Windows)
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows'))
    inputs:
      targetType: inline
      script: |
        set -ex
        choco install innosetup --version=5.6.1
  - task: Bash@3
    displayName: Lint (black & flake8)
    condition: and(succeeded(), eq(variables['LINT'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        black --check .
        flake8 .
  - task: Bash@3
    displayName: Install sdist
    condition: and(succeeded(), eq(variables['TEST'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        python setup.py sdist
        pip install $(echo "$(Build.SourcesDirectory)" | sed -e 's/\\/\//g')/dist/*.tar.gz
  - task: Bash@3
    displayName: Test
    condition: and(succeeded(), eq(variables['TEST'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        pytest --junit-xml=results.xml tests || true
        # Fail the task if results.xml was not created
        if [[ ! -f results.xml ]]
        then
          echo "##vso[task.logissue type=error]No test results were found"
          exit 1
        fi
  - task: PublishTestResults@2
    condition: and(succeeded(), eq(variables['TEST'], '1'))
    inputs:
      testResultsFiles: results.xml
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: Test $(vmImage)
  - task: Bash@3
    displayName: Freeze
    condition: and(succeeded(), eq(variables['FREEZE'], '1'))
    inputs:
      targetType: inline
      script: |
        python freeze/freezeScript.py
        rm -rf ./frozen/pyzo
        rm -rf ./frozen/pyzo.app
  - task: PublishBuildArtifacts@1
    displayName: Publish distributions
    condition: and(succeeded(), or(ne(variables['DOCKERIMAGE'], ''), eq(variables['FREEZE'], '1')))
    inputs:
      pathtoPublish: frozen
      artifactName: frozen


- job: Release

  dependsOn: Build

  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  pool:
    vmImage: ubuntu-16.04

  steps:
  - task: Bash@3
    displayName: git tag == git branch
    inputs:
      targetType: inline
      script: |
        set -ex
        IS_TAG_BUILD=$(expr $(git describe --tags) == $(Build.SourceBranchName)) || true
        echo "##vso[task.setvariable variable=IS_TAG_BUILD]$IS_TAG_BUILD"
        if [[ $IS_TAG_BUILD != 1 ]]; then
          echo This build was not triggered by a tag, aborting release
        fi
  - task: UsePythonVersion@0
    displayName: Select Python
    condition: and(succeeded(), eq(variables['IS_TAG_BUILD'], '1'))
    inputs:
      versionSpec: $(PY_VERSION)
  - task: DownloadBuildArtifacts@0
    displayName: Download dist
    condition: and(succeeded(), eq(variables['IS_TAG_BUILD'], '1'))
    inputs:
      artifactName: frozen
      downloadPath: .
  - task: GithubRelease@1
    displayName: GitHub Release
    condition: and(succeeded(), eq(variables['IS_TAG_BUILD'], '1'))
    inputs:
      gitHubConnection: github.com_almarklein
      repositoryName: 'pyzo/pyzo'
      assets: |
        frozen/*.zip
        frozen/*.tar.gz
        frozen/*.exe
        frozen/*.msi
        frozen/*.dmg
      isDraft: true
      addChangeLog: false
      assetUploadMode: replace
