# -*- coding: utf-8 -*-
# Copyright (C) 2013, the IEP development team
#
# IEP is distributed under the terms of the (new) BSD License.
# The full license can be found in 'license.txt'.

"""
Logviewer that can handle log messages over the logging system and udp.

Greatly copied from logviewer existing project.
"""

import logging
import struct
import pickle
from pyzolib.qt import QtCore, QtGui, QtNetwork
import iep
from iep import translate

tool_name = "Log viewer"
tool_summary = "Subscribes to the python logging module"


class MyHandler(logging.Handler):
    """ Handler that appends records to the model """
    def __init__(self, model):
        super().__init__()
        self._model = model

    def emit(self, record):
        self._model.add_record(record)


class UdpHandler(QtCore.QObject):
    """ Listens to a udp port. Default is port 9021 """
    def __init__(self, model, port=9021):
        super().__init__()
        self._model = model
        self._socket = QtNetwork.QUdpSocket(self)
        self._socket.bind(QtNetwork.QHostAddress.Any, port)
        self._socket.readyRead.connect(self.readDatagrams)

    def readDatagrams(self):
        while self._socket.hasPendingDatagrams():
            datagram_size = self._socket.pendingDatagramSize()
            datagram, _, _ = self._socket.readDatagram(datagram_size)
            self.handle(datagram)

    def handle(self, packet):
        chunk = packet
        slen = struct.unpack('>L', chunk[:4])[0]
        chunk = chunk[4:]
        assert slen == len(chunk)
        obj = pickle.loads(chunk)
        record = logging.makeLogRecord(obj)
        self._model.add_record(record)


class IepLogViewer(QtGui.QTableView):
    """
        Log events generated by python logging objects.
    """
    def __init__(self, parent=None):
        super().__init__(parent)
        self._model = LogRecordModel()
        self.setModel(self._model)

        # Attach to the rootlogger of this python instance:
        logger = logging.getLogger()
        logger.setLevel(logging.DEBUG)
        handler = MyHandler(self._model)
        handler.setLevel(logging.DEBUG)
        logger.addHandler(handler)

        # Attach udp server:
        self._udpServer = UdpHandler(self._model)


class LogRecordModel(QtCore.QAbstractTableModel):
    def __init__(self):
        super().__init__()
        self.records = []
        self.cols = ('created', 'levelname', 'msg', 'filename', 'lineno')

    def add_record(self, record):
        pos = len(self.records)
        self.beginInsertRows(QtCore.QModelIndex(), pos, pos)
        self.records.append(record)
        self.endInsertRows()

    def rowCount(self, parent):
        return len(self.records)

    def columnCount(self, parent):
        return len(self.cols)

    def data(self, index, role):
        if index.isValid():
            record = self.records[index.row()]
            attr = self.cols[index.column()]
            if role == QtCore.Qt.DisplayRole:
                v = str(getattr(record, attr))
                return v

    def headerData(self, section, orientation, role):
        if orientation == QtCore.Qt.Horizontal and \
                role == QtCore.Qt.DisplayRole:
            return self.cols[section]

if __name__ == '__main__':
    import iep.iepcore.main
    iep.iepcore.main.loadIcons()
    view = IepLogViewer()
    view.show()
